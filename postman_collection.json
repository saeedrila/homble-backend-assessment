{
	"info": {
		"_postman_id": "428936ed-349a-42e8-8ffe-00a5d961a223",
		"name": "Homble Backend Assessment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27725606"
	},
	"item": [
		{
			"name": "Products list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - name\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.products).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    ",
							"    responseData.products.forEach(function(product) {",
							"        pm.expect(product).to.have.property('name');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  responseData.products.forEach(function(product) {",
							"    pm.expect(product.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Products list with refregeration query true",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - name\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.products).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    ",
							"    responseData.products.forEach(function(product) {",
							"        pm.expect(product.name).to.exist.and.to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.products).to.be.an('array');",
							"  ",
							"  responseData.products.forEach((product) => {",
							"    pm.expect(product.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/?refregerated=true",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						""
					],
					"query": [
						{
							"key": "refregerated",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Products list with refregeration query false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - name\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.products).to.be.an('array');",
							"    ",
							"    responseData.products.forEach(function(product) {",
							"        pm.expect(product).to.have.property('name');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.products).to.be.an('array');",
							"  responseData.products.forEach(function(product) {",
							"    pm.expect(product.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/?refregerated=false",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						""
					],
					"query": [
						{
							"key": "refregerated",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Login success 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{X-CSRFToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"saeed\",\n    \"password\": \"asdf\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/login/?next=/admin/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"login",
						""
					],
					"query": [
						{
							"key": "next",
							"value": "/admin/"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Categories list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/categories/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"categories",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create SKU",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Selling price is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.selling_price).to.be.a('number');",
							"    pm.expect(responseData.selling_price).to.be.at.least(0);",
							"});",
							"",
							"pm.test(\"Size is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.size).to.be.a('number');",
							"    pm.expect(responseData.size).to.be.at.least(0);",
							"});",
							"",
							"pm.test(\"Measurement unit must be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.measurement_unit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"pm.test(\"Save SKU ID\", function () {",
							"    // Parse the response JSON",
							"    var responseData = pm.response.json();",
							"",
							"    // Save the SKU ID to a Postman variable",
							"    pm.environment.set(\"skuId\", responseData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"product\": 1,\n    \"size\": 250,\n    \"measurement_unit\": \"gm\",\n    \"status\": 1,\n    \"platform_commission\": 10,\n    \"cost_price\": 50\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/create-sku/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"create-sku",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update SKU status to approved",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 202\", function () {",
							"  pm.expect(pm.response.code).to.equal(202);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'Details'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('Details');",
							"});",
							"",
							"",
							"pm.test(\"Details field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.Details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Details should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Sku_id and status parameters are present in the request URL\", function () {",
							"    const requestUrl = pm.request.url.toString();",
							"    ",
							"    pm.expect(requestUrl).to.include(\"sku_id\").and.to.include(\"status\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/products/update-sku-status/?sku_id={{skuId}}&status=approved",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"update-sku-status",
						""
					],
					"query": [
						{
							"key": "sku_id",
							"value": "{{skuId}}"
						},
						{
							"key": "status",
							"value": "approved"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete SKU",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.expect(pm.response.code).to.equal(204);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body contains the expected fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Details).to.exist;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/products/delete-sku/?sku_id={{skuId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"delete-sku",
						""
					],
					"query": [
						{
							"key": "sku_id",
							"value": "{{skuId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Products details with SKU",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/details-with-sku/?product_id=7",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"details-with-sku",
						""
					],
					"query": [
						{
							"key": "product_id",
							"value": "7"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "headerPrefix",
				"value": "Token",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "staff-token",
			"value": "1a66627570137de385c36dfe5cc23ea6ae1accc2",
			"type": "string"
		},
		{
			"key": "customer-token",
			"value": "32e6bc7f3de1ee132e5c7f151d56ce0d9267a829",
			"type": "string"
		}
	]
}
